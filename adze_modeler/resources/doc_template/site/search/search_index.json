{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Simple Api for Distiller Projects The goal of this API is to provide a simple and easy to use interface, which can help to automatically deploy a the Distiller Project class based machine learning models as a production ready application. The server waits for a single json, which contains the input text under a Text key, then the application reads the output from the output_stack of the Distiller Project. Basic Usage We can run a simple ExampleProject, which based on the AbstractProject classes in the following way: from distiller.server import Server from example_project import ExampleProject server = Server(ExampleProject) server.run() Endpoints / endpoint, which contains the project documentation, by default, this page contains the documentation of the server module. This can be easily replaced by a static html page. Distiller project supports MkDocs (https://www.mkdocs.org/) documentation, however, other documentation generator based outputs can be inserted to this endpoint. /POST endpoint, where the application waits for an input json as a single input for the machine learning based text processing task and gives back the distilled text. This Post endpoint waits for a json, which contains a Text key. /apidoc endpoint, which describes the roles and the basic functions of the integrated api endpoint as an OpenApi documentation. Morover, this html site contains a small, integrated test interface . /ping endpoint, to test the functionality and the acessibility of the realized server from the client side. Usage of the Integrated Test Interface in \\apidoc Distiller Server stands on the shoulders of giants: FastAPI for the web parts. Pydantic for the data parts and the JsonSchma validation. OpenAPI for the API documentation and testing the basic functionality. Customization Using the integrated methods and parameters of the Server class, it can be easily customized: EXAMPLE I TITLE/HOST/PORT, etc... Documentation set_project_mkdocs_dir_path(path) : the generated documentation should be placed in this directory, the function waits an MkDocs Project which has a following structure: mkdocs.yml # The configuration file. site/ # The generated project files assets/ search/ index.html # The endpoint shows this page as the documentations homepage ... # Other generated html pages docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Secure all endpoints with 'https' communication: server.set_key_file_path(key.pem) server.set_cert_file_path(files(cert.pem) server.set_json_validator(NewJson) EXAMPLE II","title":"Home"},{"location":"index.html#simple-api-for-distiller-projects","text":"The goal of this API is to provide a simple and easy to use interface, which can help to automatically deploy a the Distiller Project class based machine learning models as a production ready application. The server waits for a single json, which contains the input text under a Text key, then the application reads the output from the output_stack of the Distiller Project.","title":"Simple Api for Distiller Projects"},{"location":"index.html#basic-usage","text":"We can run a simple ExampleProject, which based on the AbstractProject classes in the following way: from distiller.server import Server from example_project import ExampleProject server = Server(ExampleProject) server.run()","title":"Basic Usage"},{"location":"index.html#endpoints","text":"/ endpoint, which contains the project documentation, by default, this page contains the documentation of the server module. This can be easily replaced by a static html page. Distiller project supports MkDocs (https://www.mkdocs.org/) documentation, however, other documentation generator based outputs can be inserted to this endpoint. /POST endpoint, where the application waits for an input json as a single input for the machine learning based text processing task and gives back the distilled text. This Post endpoint waits for a json, which contains a Text key. /apidoc endpoint, which describes the roles and the basic functions of the integrated api endpoint as an OpenApi documentation. Morover, this html site contains a small, integrated test interface . /ping endpoint, to test the functionality and the acessibility of the realized server from the client side.","title":"Endpoints"},{"location":"index.html#usage-of-the-integrated-test-interface-in-apidoc","text":"","title":"Usage of the Integrated Test Interface in \\apidoc"},{"location":"index.html#distiller-server-stands-on-the-shoulders-of-giants","text":"FastAPI for the web parts. Pydantic for the data parts and the JsonSchma validation. OpenAPI for the API documentation and testing the basic functionality.","title":"Distiller Server stands on the shoulders of giants:"},{"location":"index.html#customization","text":"Using the integrated methods and parameters of the Server class, it can be easily customized: EXAMPLE I TITLE/HOST/PORT, etc...","title":"Customization"},{"location":"index.html#documentation","text":"set_project_mkdocs_dir_path(path) : the generated documentation should be placed in this directory, the function waits an MkDocs Project which has a following structure: mkdocs.yml # The configuration file. site/ # The generated project files assets/ search/ index.html # The endpoint shows this page as the documentations homepage ... # Other generated html pages docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Documentation"},{"location":"index.html#secure-all-endpoints-with-https-communication","text":"server.set_key_file_path(key.pem) server.set_cert_file_path(files(cert.pem) server.set_json_validator(NewJson) EXAMPLE II","title":"Secure all endpoints with 'https' communication:"}]}
